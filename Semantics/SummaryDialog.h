/**
 * @class SummaryDialog
 * @brief Класс диалога, отображающего сводку формул и позволяющего взаимодействовать с ними.
 *
 * Этот диалог обрабатывает отображение формул и предоставляет возможности для их изменения и управления.
 */
class SummaryDialog : public CDialog
{
	DECLARE_DYNAMIC(SummaryDialog)

	/**
	 * @brief Инициализирует диалог.
	 * Эта функция вызывается при первом создании диалога и отвечает за настройку необходимых данных.
	 * @return BOOL Возвращает TRUE, если диалог был успешно инициализирован.
	 */
	BOOL OnInitDialog();

	/**
	 * @var entities
	 * @brief Указатель на вектор указателей на объекты EntityBase.
	 * Используется для хранения списка сущностей, связанных с формулами.
	 */
	vector <EntityBase *> * entities;

	/**
	 * @brief Проверяет, корректно ли новое определение сущности.
	 * Эта функция проверяет, может ли новое текстовое определение заменить старое для данной сущности.
	 * @param pbase Указатель на объект EntityBase, который необходимо переопределить.
	 * @param new_text Строка, содержащая новое определение для сущности.
	 * @return bool Возвращает true, если переопределение корректно, иначе false.
	 */
	bool IfCorrectRedefinition(EntityBase * pbase, tstring & new_text);

public:
	/**
	 * @brief Конструктор по умолчанию для класса SummaryDialog.
	 * Инициализирует диалог без данных.
	 * @param pParent Указатель на родительское окно, по умолчанию NULL.
	 */
	SummaryDialog(CWnd* pParent = NULL);

	/**
	 * @brief Деструктор для класса SummaryDialog.
	 * Освобождает любые ресурсы, использованные диалогом.
	 */
	virtual ~SummaryDialog();

	/**
	 * @enum IDD
	 * @brief Идентификатор ресурса для этого диалога.
	 */
	enum { IDD = IDD_SUMMARYDIALOG };

protected:
	/**
	 * @brief Обрабатывает обмен данными между элементами управления и переменными.
	 * Эта функция обеспечивает правильный перенос данных, введенных в элементы управления, в переменные класса.
	 * @param pDX Указатель на объект CDataExchange, используемый для обмена данными.
	 */
	virtual void DoDataExchange(CDataExchange* pDX);

	/**
	 * @brief Карта сообщений для обработки сообщений диалога.
	 */
	DECLARE_MESSAGE_MAP()

public:
	/**
	 * @var m_list
	 * @brief Пользовательский элемент управления списком, отображающий математические формулы.
	 */
	CMathListCtrlEx m_list;

	/**
	 * @var m_edit
	 * @brief Пользовательский элемент управления для ввода и изменения формул.
	 */
	CMyEdit m_edit;

	/**
	 * @brief Устанавливает формулы для отображения в диалоге.
	 * Эта функция заполняет список формул на основе заданных сущностей.
	 * @param all_entities Указатель на вектор объектов EntityBase, по умолчанию NULL.
	 */
	void setFormulas(vector <EntityBase *> * all_entities = NULL);

	/**
	 * @brief Предварительно обрабатывает сообщения перед их отправкой в элемент управления.
	 * Эта функция обрабатывает нажатия клавиш и другие вводы перед их передачей элементам управления.
	 * @param pMsg Указатель на объект MSG, содержащий детали сообщения.
	 * @return BOOL Возвращает TRUE, если сообщение обработано, иначе FALSE.
	 */
	virtual BOOL PreTranslateMessage(MSG* pMsg);

	/**
	 * @brief Обрабатывает нажатие кнопки "Отмена" в диалоге.
	 * Эта функция вызывается, когда пользователь нажимает кнопку "Отмена".
	 */
	virtual void OnCancel();

	/**
	 * @brief Обрабатывает нажатие кнопки "OK" в диалоге.
	 * Эта функция вызывается, когда пользователь нажимает кнопку "OK".
	 */
	// virtual void OnOK();

	/**
	 * @brief Обрабатывает изменение размера элементов списка для элемента управления.
	 * Эта функция настраивает размеры элементов списка на основе их содержимого.
	 * @param nIDCtl Идентификатор элемента управления.
	 * @param lpMeasureItemStruct Указатель на структуру MEASUREITEMSTRUCT, содержащую детали размера элемента.
	 */
	afx_msg void OnMeasureItem(int nIDCtl, LPMEASUREITEMSTRUCT lpMeasureItemStruct);

	/**
	 * @brief Сохраняет формулы и завершает работу диалога.
	 * Эта функция сохраняет любые изменения, внесенные в формулы, и закрывает диалог.
	 */
	void SaveAndExit();

	/**
	 * @brief Обрабатывает событие нажатия кнопки "OK".
	 * Эта функция вызывается, когда пользователь нажимает кнопку "OK" в диалоге.
	 */
	afx_msg void OnBnClickedOk();

	/**
	 * @brief Обрабатывает переопределение формулы.
	 * Эта функция вызывается, когда пользователь пытается переопределить формулу.
	 */
	afx_msg void OnBnClickedPereopisanie();

	/**
	 * @brief Обрабатывает изменения в элементе управления списком сводки.
	 * Эта функция вызывается при изменении элемента в списке сводки.
	 * @param pNMHDR Указатель на структуру NMHDR, содержащую детали уведомления.
	 * @param pResult Указатель на результат уведомления.
	 */
	afx_msg void OnLvnOdstatechangedSummarylist(NMHDR *pNMHDR, LRESULT *pResult);

	/**
	 * @var m_RedefineBtn
	 * @brief Кнопка для переопределения формул.
	 */
	CButton m_RedefineBtn;

	/**
	 * @brief Обрабатывает событие правого клика в диалоге.
	 * Эта функция вызывается, когда пользователь щелкает правой кнопкой мыши внутри диалога.
	 * @param nFlags Флаги, указывающие состояние кнопок и клавиш мыши.
	 * @param point Координаты курсора в момент правого клика.
	 */
	afx_msg void OnRButtonDown(UINT nFlags, CPoint point);
};

/**
 * @brief Меняет определения формул между двумя сущностями.
 * Эта функция меняет определения двух сущностей в заданном диапазоне.
 * @param temp_entities Указатель на временный вектор объектов EntityBase.
	 * @param entities Указатель на вектор объектов EntityBase, содержащий сущности для обмена.
	 * @param first Индекс первой сущности для обмена.
	 * @param last Индекс последней сущности для обмена.
	 * @param psd Указатель на объект SummaryDialog, по умолчанию NULL.
	 */
void ReverseDefinition(vector <EntityBase *> * temp_entities, vector <EntityBase *> * entities, int first, int last, SummaryDialog *psd = nullptr);
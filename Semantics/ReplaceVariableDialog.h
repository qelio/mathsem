// Автор: Татаринцев В.В., tatarintsev_vv@mail.ru, 2013-2017
#pragma once

#include "afxwin.h"
#include "Formula.h"
#include "ScientificListBox.h"

/**
 * @class ReplaceVariableDialog
 * @brief Диалоговое окно для замены переменных в формуле.
 *
 * Этот класс предоставляет функционал для управления и замены переменных
 * в формуле. Оно включает списки для отображения переменных и свободных переменных,
 * комбинированные списки для выбора имен и методы для обработки логики замены переменных.
 */
class ReplaceVariableDialog : public CDialogEx
{
	DECLARE_DYNAMIC(ReplaceVariableDialog)

    /**
     * @brief Указатель на список сущностей, хранящих данные переменных.
     *
     * Этот список используется для заполнения диалогового окна переменными, которые можно заменить.
     */
	vector <EntityBase *> * entities;

public:
    /**
     * @brief Конструктор класса ReplaceVariableDialog.
     *
     * Инициализирует диалог, устанавливая родительское окно на `pParent`, если указано.
     *
     * @param pParent Родительское окно для диалога (по умолчанию NULL).
     */
	ReplaceVariableDialog(CWnd* pParent = NULL);

    /**
     * @brief Деструктор класса ReplaceVariableDialog.
     *
     * Очищает ресурсы, используемые диалогом.
     */
	virtual ~ReplaceVariableDialog();

    /** Данные диалога */
	enum { IDD = IDD_REPLACEVARIABLE };

protected:
    /**
     * @brief Обмен данными между диалогом и элементами управления.
     *
     * Этот метод используется для передачи данных в и из элементов управления в диалоговом окне.
     *
     * @param pDX Объект обмена данными.
     */
	virtual void DoDataExchange(CDataExchange* pDX);

	DECLARE_MESSAGE_MAP()

public:
    /**
     * @brief Вызывается, когда нажата кнопка OK.
     *
     * Этот метод обрабатывает логику завершения замены переменных
     * при нажатии пользователем кнопки "OK".
     */
	afx_msg void OnBnClickedOk();

    /** Шрифт для индексов */
	CFont * m_fIndexes;

    /** Шрифт для символов (используется шрифт Symbol) */
	CFont * m_fSymbol;

    /** Элемент управления для ввода индекса */
	CEdit m_editIndex;

    /** Список для отображения научных элементов */
	ScientificListBox m_list;

    /** Список для отображения свободных переменных */
	ScientificListBox m_listFreeVariables;

    /** Список для отображения существующих переменных */
	ScientificListBox m_listVariables;

    /** Комбинированный список для выбора имени переменной */
	CComboBox m_comboName;

    /**
     * @brief Инициализирует диалоговое окно.
     *
     * Этот метод вызывается при инициализации диалога для установки начального состояния
     * элементов управления, таких как списки и комбинированные списки.
     *
     * @return TRUE, если инициализация успешна, иначе FALSE.
     */
	virtual BOOL OnInitDialog();

    /**
     * @brief Устанавливает список сущностей для диалога.
     *
     * Этот метод устанавливает список всех доступных сущностей, которые можно использовать
     * для заполнения диалога соответствующими данными для замены переменных.
     *
     * @param all_entities Список сущностей для установки (по умолчанию NULL).
     */
	void setEntities(vector <EntityBase *> * all_entities = NULL) {entities = all_entities; };

    /**
     * @brief Отображает список свободных переменных.
     *
     * Этот метод заполняет список свободных переменных и делает его видимым в диалоге.
     */
	void ShowFreeVariables();

    /**
     * @brief Скрывает список свободных переменных.
     *
     * Этот метод скрывает список свободных переменных из диалога.
     */
	void HideFreeVariables();

    /**
     * @brief Отображает список существующих переменных.
     *
     * Этот метод заполняет список переменных и делает его видимым в диалоге.
     */
	void ShowVariables();

    /**
     * @brief Скрывает список переменных.
     *
     * Этот метод скрывает список переменных из диалога.
     */
	void HideVariables();

    /**
     * @brief Сбрасывает имена в комбинированном списке.
     *
     * Этот метод обновляет комбинированный список имен на основе заданного символа.
     * Он обеспечивает синхронизацию отображаемых имен с выбранным символом.
     *
     * @param symbol Символ, используемый для фильтрации или сброса имен в комбинированном списке.
     */
	void ResetComboNames(TCHAR symbol);

    /** Данные для радиокнопок */
	int m_dataRadio;

    /** Вектор новых переменных сущностей */
	vector <EntityVariable *> pev_new;

    /** Кнопка для подтверждения замены переменных */
	CButton m_buttonOK;

    /**
     * @brief Вызывается при изменении выбора в первом списке множеств.
     *
     * Этот метод обрабатывает изменения выбора в первом списке множеств.
     */
	afx_msg void OnSelchangeSetlist1();

    /**
     * @brief Вызывается при изменении выбора во втором списке множеств.
     *
     * Этот метод обрабатывает изменения выбора во втором списке множеств.
     */
	afx_msg void OnSelchangeSetlist2();

    /**
     * @brief Вызывается при нажатии радиокнопки ввода текста.
     *
     * Этот метод обрабатывает логику при выборе радиокнопки "ввод текста".
     */
	afx_msg void OnBnClickedRadioinputtext();

    /**
     * @brief Вызывается при нажатии радиокнопки "выбор переменной".
     *
     * Этот метод обрабатывает логику при выборе радиокнопки "выбор переменной".
     */
	afx_msg void OnBnClickedRadioselectvariable();
};
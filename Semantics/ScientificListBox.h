// Автор: Татаринцев В.В., akizelokro@mail.ru, 2013-2014
#pragma once
#include "MathListCtrlEx.h"
#include "common_functions.h"

/**
 * @class ScientificListBox
 * @brief Класс настраиваемого списка, используемый для отображения
 * научных элементов со специальным форматированием для математических символов и индексов.
 *
 * Этот класс расширяет CListBox и позволяет кастомизировать отрисовку и сортировку элементов списка,
 * в частности для отображения математических символов и выражений.
 */
class ScientificListBox : public CListBox
{
    DECLARE_DYNAMIC(ScientificListBox)

    /**
     * @brief Флаг, указывающий, отсортирован ли список.
     *
     * Этот булевский флаг определяет, должен ли список элементов в коробке быть отсортирован.
     */
    bool isSorted;

public:
    /**
     * @brief Конструктор класса ScientificListBox.
     *
     * Инициализирует научный список, настраивая необходимые свойства и состояния.
     */
    ScientificListBox();

    /**
     * @brief Деструктор класса ScientificListBox.
     *
     * Очищает любые ресурсы, используемые научным списком.
     */
    virtual ~ScientificListBox();

protected:
    DECLARE_MESSAGE_MAP()

    /**
     * @brief Шрифт для отображения математических символов в списке.
     *
     * Этот шрифт используется для отображения математических символов в списке.
     */
    CFont * m_fSymbol;

    /**
     * @brief Шрифт для отображения индексов (подстрочных или надстрочных) в списке.
     *
     * Этот шрифт используется для отображения индексов в списке, предоставляя функциональность
     * подстрочного и надстрочного текста.
     */
    CFont * m_fIndexes;

public:
    /**
     * @brief Кастомизированный метод для отрисовки элементов списка.
     *
     * Этот метод переопределяет стандартное поведение отрисовки элементов списка, позволяя
     * отображение математических символов и выражений с соответствующими шрифтами.
     *
     * @param lpDrawItemStruct Указатель на структуру DRAWITEMSTRUCT, содержащую информацию
     * о рисуемом элементе.
     */
    virtual void DrawItem(LPDRAWITEMSTRUCT /*lpDrawItemStruct*/);

    /**
     * @brief Вектор указателей на SemanticString.
     *
     * Этот вектор хранит семантические строки, которые могут представлять математические выражения
     * или символы в списке.
     */
    vector <SemanticString *> DCU;

    /**
     * @brief Устанавливает шрифт для отображения индексов в списке.
     *
     * Этот метод устанавливает шрифт, который будет использоваться для отображения подстрочного
     * и надстрочного текста в списке.
     *
     * @param m_fIndexes_ Указатель на CFont, который будет использоваться для индексов.
     */
    void SetIndexesFont(CFont * m_fIndexes_) { m_fIndexes = m_fIndexes_; };

    /**
     * @brief Сравнивает два элемента списка для сортировки.
     *
     * Этот метод предоставляет функцию сравнения, используемую для сортировки элементов
     * в списке.
     *
     * @param lpCompareItemStruct Указатель на структуру COMPAREITEMSTRUCT, содержащую информацию
     * о сравниваемых элементах.
     * @return Значение, указывающее относительный порядок двух элементов (отрицательное, ноль
     * или положительное).
     */
    virtual int CompareItem(LPCOMPAREITEMSTRUCT /*lpCompareItemStruct*/);

    /**
     * @brief Задает, должен ли список быть отсортирован.
     *
     * Этот метод позволяет включить или отключить сортировку для списка элементов.
     *
     * @param toSort Булевое значение, указывающее, должна ли сортировка быть включена
     * (true) или отключена (false).
     */
    void SetSorting(bool toSort = false) { isSorted = toSort; };
};
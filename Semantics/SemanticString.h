/**
 * @file SemanticString.h
 * @brief Определяет класс SemanticString и связанные с ним перечисления для стилизации математического текста.
 */

#pragma once

#include "common_functions.h"
#include "Formula.h"

/**
 * @enum MathStyle
 * @brief Определяет стилизацию символов для математических выражений.
 */
enum MathStyle {
    NONE_MATHSTYLE = 0,  /**< Без специальной стилизации, обычный текст */
    LOW_MATHINDEX = 1,   /**< Подстрочный индекс */
    HIGH_MATHINDEX = 2,  /**< Надстрочный индекс */
    SYMBOL_TYPEFACE = 3  /**< Символьный шрифт */
};

/**
 * @class SemanticString
 * @brief Представляет семантическую строку для отображения математических выражений со стилизацией.
 *
 * Класс SemanticString отвечает за подготовку и отображение строки, содержащей математические
 * выражения с различными стилями, такими как подстрочные, надстрочные индексы и специальные символы.
 */
class SemanticString
{
public:
    /**
     * @brief Конструктор для создания нового объекта SemanticString.
     */
    SemanticString();

    /**
     * @brief Деструктор для объекта SemanticString.
     */
    ~SemanticString();

    /**
     * @brief Подготавливает внутренние данные из входной строки для отображения.
     *
     * Разбирает заданную текстовую строку и заполняет массивы символов и стилей соответственно.
     * При необходимости форматирует строку для экспорта в Word, если @p forWordExport задано true.
     *
     * @param tstr Входная текстовая строка для подготовки.
     * @param forWordExport Указывает, является ли подготовка для экспорта в Word.
     * @return Возвращает true, если подготовка прошла успешно, иначе false.
     */
    bool PrepareSubItemData(tstring& tstr, bool forWordExport = false);

    /**
     * @brief Отрисовывает содержимое SemanticString в указанном прямоугольнике.
     *
     * Отображает подготовленную строку на контексте устройства @p dc внутри прямоугольника @p rectSubItem.
     * Использует предоставленные шрифты для символов и индексов.
     *
     * @param dc Контекст устройства для отрисовки.
     * @param rectSubItem Область прямоугольника для отрисовки содержимого.
     * @param m_fSymbol Шрифт, используемый для символов.
     * @param m_fIndexes Шрифт, используемый для подстрочных и надстрочных символов.
     */
    void DrawItem(CDC& dc, CRect& rectSubItem, CFont* m_fSymbol, CFont* m_fIndexes);

    // Дополнительные методы и члены можно добавлять здесь...

private:
    /**
     * @brief Буфер символов, содержащий семантическую строку.
     *
     * Хранит символы для отображения с поддержкой Юникода, если это применимо.
     * Размер буфера фиксирован и составляет 256 символов.
     */
#ifdef _UNICODE
    WCHAR tchars[256];
#else
    unsigned char tchars[256];
#endif

    /**
     * @brief Массив значений MathStyle, соответствующих каждому символу в @c tchars.
     *
     * Определяет стилизацию для каждого символа, такую как подстрочный, надстрочный индекс или символьный шрифт.
     */
    int symbolics[256];

    /**
     * @brief Количество символов в массивах @c tchars и @c symbolics.
     */
    int count;

    /**
     * @brief Указатель на математическую сущность, связанную с этой строкой.
     *
     * Обычно указывает на объект Formula или EntityBase, который является источником данных строки.
     */
    EntityBase* formula;

    /**
     * @brief Исходная текстовая строка, использованная для подготовки семантической строки.
     */
    tstring* text;

    /**
     * @brief Предварительно вычисленный размер отрисованной строки.
     *
     * Вычисляется во время операций отрисовки для оптимизации отображения.
     */
    CSize size;

	SemanticString operator=(SemanticString &str); // Оператор присваивания
};